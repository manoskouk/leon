import scala.util._

object SortedListTests {

  def time[R](block: => R): (R, Int) = {
      val t0 = System.nanoTime()
      val result = block   
      val t1 = System.nanoTime()
      //println("Elapsed time: " + (t1 - t0)/1000000 + "ms")
      (result, ((t1 - t0)/1000000).round ) 
  }

  def test1 : Seq[Int] = { 
    import original.SortedList._

    // make a list of length n with random elements
    def mkList(n : Int, generator : (List, Int) => List) = {
      val rand = new Random()
      def mkListAcc(n : Int, acc: List) : List = {
        if (n == 0) acc 
        else {
          val hd = rand.nextInt()
          mkListAcc(n-1, generator(acc, hd))
        }
      }
      mkListAcc(n, Nil())
    }

    val (lst1,t1) = time {mkList(100    , insert3)}
    val (lst2,t2) = time {mkList(10000  , insert3)}
    val (lst3,t3) = time {mkList(1000000, insert3)}

    Seq(t1,t2,t3)

  }

  def test2 : Seq[Int] = { 
    import memoOut.SortedListExpanded._

    // make a list of length n with random elements
    def mkList(n : Int, generator : (List, Int) => List ) = {
      val rand = new Random()
      def mkListAcc(n : Int, acc: List) : List = {
        if (n == 0) acc 
        else {
          val hd = rand.nextInt()
          mkListAcc(n-1, generator(acc, hd))
        }
      }
      mkListAcc(n, createNil())
    }

    val (lst1,t1) = time {mkList(100    , insert3)}
    val (lst2,t2) = time {mkList(10000  , insert3)}
    val (lst3,t3) = time {mkList(1000000, insert3)}

    Seq(t1,t2,t3)

  }

  def main(args : Array[String]) { 
    val times1 = test1
    val times2 = test2
    println("Times for normal:      " + times1.mkString(","))
    println("Times for transformed: " + times2.mkString(","))
    
  }

}

